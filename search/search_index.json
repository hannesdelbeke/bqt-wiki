{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>This is the front page of the site \u26a0\ufe0f</p> <p>This website was created from markdown files, with no code using the template https://github.com/hannesdelbeke/wiki_template</p>"},{"location":"Blender%20python%20interpreter/","title":"Blender python interpreter","text":"<p>Blender\u2019s integrated Python interpreter lives in the Blender install folder: <code>../Blender Foundation/&lt;version&gt;/Python/bin</code></p> <p>Any time you see a command that says <code>python</code>, you should instead use Blender\u2019s python interpreter.</p> <p>so instead of  <pre><code>python -m pip install bqt\n</code></pre> use <pre><code>\"C:\\Program Files\\Blender Foundation\\Blender 3.2\\3.2\\python\\bin\\python.exe\" -m pip install bqt\n</code></pre> which is the same as <pre><code>cd \"C:\\Program Files\\Blender Foundation\\Blender 3.2\\3.2\\python\\bin\"\npython -m pip install bqt\n</code></pre></p> <p>(\u26a0\ufe0f note that Blender modifies it\u2019s paths on startup, so pip won\u2019t be aware of all installed modules)</p>"},{"location":"Blender%20python%20interpreter/#backlinks","title":"Backlinks","text":"<ul> <li>install bqt module<ul> <li>use the Blender python interpreter instead of <code>python.exe</code> </li> </ul> </li> <li>install-bqt-addon<ul> <li>Use the Blender python interpreter instead of <code>python</code></li> </ul> </li> </ul>"},{"location":"Environment%20variables/","title":"Environment variables","text":""},{"location":"Environment%20variables/#purpose","title":"Purpose","text":"<p>The env variables are mostly used as feature toggles, letting you turn off certain features of bqt if they are undesired or causing problems.</p>"},{"location":"Environment%20variables/#overview","title":"Overview","text":"BQT_DISABLE_STARTUP if set to\u2003<code>1</code>, completely disable bqt BQT_DISABLE_WRAP if set to\u2003<code>1</code>, disable wrapping blender in a QWindow BQT_DISABLE_CLOSE_DIALOGUE if set to\u2003<code>1</code>, use the standard blender close dialogue BQT_MANAGE_FOREGROUND defaults to\u2003<code>1</code>, if\u2003<code>0</code>, widgets registered with\u2003<code>bqt.add(my_widget)</code>\u2003won\u2019t stay in the foreground when using Blender. BQT_AUTO_ADD defaults to\u2003<code>1</code>, if\u2003<code>0</code>\u2003top level widgets won\u2019t automatically be added to bqt. BQT_UNIQUE_OBJECTNAME defaults to\u2003<code>1</code>, 1 or 0, automatically delete widgets with same objectName, preventing you from opening multiple versions of the same widget window. Great if you want to ensure that clicking \u201cmy window\u201d activates \u201cmywindow\u201d if already open, instead of making a new one"},{"location":"Environment%20variables/#legacy","title":"Legacy","text":"<p>Outdated env vars go here, currently no outdated env vars</p>"},{"location":"Environment%20variables/#faq","title":"FAQ","text":""},{"location":"Environment%20variables/#how-to-edit-env-variables","title":"How to edit env variables?","text":"<p>It\u2019s quite a common thing, a google search for <code>set environment variable</code> should help you.</p> <ul> <li>a tutorial for windows users with images</li> </ul>"},{"location":"Environment%20variables/#restart-after-edit-env-vars","title":"Restart after edit env vars.","text":"<p>Don\u2019t forget to click the OK button on Windows. (I\u2019ve done it \ud83d\ude05)</p> <p>After editing env variables, you have to restart Blender, or the launcher that launches Blender. e.g. <code>steam</code> or <code>blender launcher</code>. Closing these launchers often just hides them in the background, and doesn\u2019t really restarts them. Which means edits to the env vars wont show. If you don\u2019t know how to restart it, just restart your computer.</p>"},{"location":"Environment%20variables/#dynamically-set-env-vars","title":"dynamically set env vars","text":"<p>You can also do this with a startup script. If you modify env vars in code, ensure they\u2019re strings!</p>"},{"location":"Environment%20variables/#backlinks","title":"Backlinks","text":"<ul> <li>features<ul> <li> </li> </ul> </li> </ul>"},{"location":"Environment%20variables/#todo-see-environment-variables-for-explanation-of-features","title":"TODO \ud83d\udc77see Environment variables for explanation of features.","text":""},{"location":"Graph%F0%9F%95%B8%EF%B8%8F/","title":"Graph\ud83d\udd78\ufe0f","text":"<p>use mouse scroll to zoom in/out, and hold left click while dragging to pan.</p>"},{"location":"Installation/","title":"Installation","text":"<p>Choose your type of setup:</p> <ul> <li>(recommended) Install bqt addon</li> <li>(advanced) pip install bqt module</li> <li>(advanced) bqt contributors might want to install with setup bqt develop environment.</li> </ul>"},{"location":"Releasing%20a%20new%20version/","title":"Releasing a new version","text":"<p>only admins and maintainers can release new versions</p>"},{"location":"Releasing%20a%20new%20version/#releasing-a-new-version","title":"Releasing a new version","text":"<p>Find the current version, and use semver to decide the new version:</p> <p>Given a version number MAJOR.MINOR.PATCH, increment the: - MAJOR version when you make incompatible API changes - MINOR version when you add functionality in a backward compatible manner - PATCH version when you make backward compatible bug fixes  </p> <p>Additional labels for pre-release and build metadata are available as extensions to the MAJOR.MINOR.PATCH format.</p> <ol> <li>update the addon version in bqt/init.py, and the package version in setup.py </li> <li>Click <code>draft a new release</code> in the top right in releases </li> <li>Click choose a tag, and type the new version in there to create a new tag for it.    Click <code>generate release notes</code>, and add a description and/or title for the release if needed. Feel free to leave them blank.</li> <li>click the green \ud83d\udfe9 <code>publish release</code> button, to create the release.    This triggers a github action that publishes automatically to pypi: https://pypi.org/project/bqt/</li> </ol> <p>If all went well you now should see a new release </p> <ul> <li>on github: https://github.com/techartorg/bqt/releases</li> <li>the pypi release action should have started, check on it\u2019s status in actions</li> <li>if the action failed, it\u2019s likely because you didn\u2019t update the version correctly in the <code>setup.py</code>.</li> </ul>"},{"location":"Sync%20the%20wiki%20and%20wiki-branch/","title":"Sync the wiki and wiki branch","text":""},{"location":"Sync%20the%20wiki%20and%20wiki-branch/#sync-the-wiki-and-wiki-branch","title":"Sync the wiki and wiki-branch","text":""},{"location":"Sync%20the%20wiki%20and%20wiki-branch/#wiki-branch-allows-for-reviewing","title":"wiki branch allows for reviewing","text":"<p>The github-wiki doesn\u2019t allow PRs, which means changes can\u2019t be reviewed. To work around this, we duplicate the github-wiki in the wiki branch  Now anyone can submit a PR to the wiki branch, which can be reviewed.</p> <p>When a change is merged in the wiki branch, it needs to be merged back to the github-wiki. </p>"},{"location":"Sync%20the%20wiki%20and%20wiki-branch/#sync-branch-and-wiki","title":"sync branch and wiki","text":"<p>To do so, you can add a new remote to your bqt repo. <pre><code>git remote add githubwiki https://github.com/techartorg/bqt.wiki.git\n</code></pre></p> <p>And push the wiki branch to the github-wiki repo. (Wiki editors or admins only)</p>"},{"location":"Sync%20the%20wiki%20and%20wiki-branch/#backlinks","title":"Backlinks","text":"<ul> <li>how to contribute to bqt documentation<ul> <li>See Sync the wiki and wiki-branch</li> </ul> </li> </ul>"},{"location":"alternatives%20to%20bqt/","title":"Alternatives to bqt","text":""},{"location":"alternatives%20to%20bqt/#alternatives","title":"Alternatives","text":"<ul> <li>Custom (non qt) Blender UI: https://github.com/mmmrqs/bl_ui_widgets</li> <li>Blender native UI (N-Panel etc.) tutorial1 tutorial2 </li> <li>Cookie cutter, need to find the link. Some blender devs made a more low level custom UI solution for Blender. Seen at blendcon 22, was a bit buggy though.</li> </ul>"},{"location":"blender%20input%20bug/","title":"Blender input bug","text":"<p>TODO \ud83d\udc77</p> <p>alt tab bug, see https://github.com/techartorg/bqt/issues/60</p> <p>current workaround: disable qt wrapping with\u2003<code>BQT_DISABLE_WRAP</code>\u2003set to\u2003<code>1</code></p>"},{"location":"bqt%20as%20a%20dependency/","title":"Bqt as a dependency","text":"<p>TODO \ud83d\udc77</p> <p>instructions on how to add bqt as a dependency. and what instructions the dev should give to it\u2019s user.</p> <p>also point to plugget. inform devs they can auto install dependencies through this.</p>"},{"location":"close%20dialogue%20in%20foreground/","title":"Close dialogue in foreground","text":""},{"location":"close%20dialogue%20in%20foreground/#backlinks","title":"Backlinks","text":"<ul> <li>features<ul> <li>close dialogue in foreground TODO \ud83d\udc77</li> </ul> </li> </ul>"},{"location":"contribute%20guidelines/","title":"Contribute guidelines","text":"<p>hey and welcome \ud83d\udc4b</p> <p>todo \ud83d\udc77 (this page could use some improvement)</p> <ol> <li>check out the issues, pick one, or make a new issue.</li> <li>Create a PR</li> </ol> <p>checkout setup bqt develop environment</p>"},{"location":"features/","title":"Features","text":""},{"location":"features/#features","title":"features","text":"<p>TODO \ud83d\udc77see Environment variables for explanation of features. copy instructions to individual page (don\u2019t delete from env var page though.) and add images</p> <ul> <li>show QWidgets without freezing Blender TODO \ud83d\udc77</li> <li>style QWidgets with Blender stylesheet TODO \ud83d\udc77</li> <li>keep QtWidgets in foreground TODO \ud83d\udc77</li> <li>close dialogue in foreground TODO \ud83d\udc77</li> <li>prevent open same widget twice TODO \ud83d\udc77</li> </ul>"},{"location":"how%20to%20contribute%20to%20bqt%20documentation/","title":"How to contribute to bqt documentation","text":"<p>First, read the README</p>"},{"location":"how%20to%20contribute%20to%20bqt%20documentation/#first-time-contributor-help","title":"First time contributor, help?","text":"<p>This will sound complex, and like a lot, but if you try step by step and google when you get stuck, or ask questions here, you\u2019ll get there.  (Don\u2019t be afraid of making a mistake, you can\u2019t break the project if you\u2019re not admin.) Here we go\u2003\ud83d\udeb6:  </p> <ul> <li>you will need to fork the repo with all branches</li> <li>then clone the forked repo (big green button at the top on the front page)</li> <li>swap branch to the wiki branch</li> <li>open the folder in obsidian, and edit the text files (make a test change to anything)</li> <li>make a single edit, push it to your fork</li> <li>create a PR, and an admin should be able to review it. Once you successfully created a PR, feel free to close it. You are now ready to make real PRs.</li> </ul> <p>For your next steps, make actual changes to the docs. Then repeat the above steps to push the changes, and create a PR. Review it with a maintainer, maybe implement their feedback, and iterate on it until it get\u2019s merged in.</p>"},{"location":"how%20to%20contribute%20to%20bqt%20documentation/#what-should-i-work-on","title":"What should I work on","text":"<p>Check out the issues with the  <code>documentation</code> tag.</p>"},{"location":"how%20to%20contribute%20to%20bqt%20documentation/#how-is-the-wiki-setup","title":"How is the wiki setup","text":"<p>See Sync the wiki and wiki-branch</p>"},{"location":"image/","title":"Image","text":""},{"location":"install%20bqt%20module/","title":"Install bqt module","text":""},{"location":"install%20bqt%20module/#pip-install-the-latest-bqt-release","title":"PIP install the latest bqt release","text":"<p>This installs bqt as a module.  less addon clutter, but you need to handle the bqt startup code in your own startup script.  </p>"},{"location":"install%20bqt%20module/#console","title":"console","text":"<ul> <li>use the Blender python interpreter instead of <code>python.exe</code> </li> <li>recommended to install to target path</li> </ul> <pre><code>python.exe -m pip install bqt\n</code></pre>"},{"location":"install%20bqt%20module/#pip-addon","title":"PIP addon","text":"<p>Instead of the console, you can pip install bqt with the blender pip addon </p>"},{"location":"install%20bqt%20module/#installing-from-source","title":"Installing from Source","text":"<p>If you are installing from a clone of the repository you can easily install by navigating to bqt\u2019s root folder and running: <pre><code>python setup.py install\n</code></pre> Instead of install from source, you might want to setup bqt develop environment.</p>"},{"location":"install%20bqt%20module/#backlinks","title":"Backlinks","text":"<ul> <li>Installation<ul> <li>(advanced) pip install bqt module</li> </ul> </li> <li>quick start guide<ul> <li>Run this code in Blender for a quick demo.  </li> </ul> </li> </ul>"},{"location":"install-bqt-addon/","title":"Install bqt addon","text":"<p>Installing bqt as an addon means less coding for you.</p> <ul> <li>The bqt startup code automatically runs on Blender startup.  </li> <li>You can disable bqt by disabling the addon.</li> </ul> <p>You can either install through plugget or manually install the addon and its dependencies.</p>"},{"location":"install-bqt-addon/#plugget-recommended","title":"Plugget  (recommended)","text":"<ol> <li>Download the plugget blender addon by clicking on the link.</li> <li>Find the install file in your downloads folder. </li> <li>Double-clicking the file will automatically open it in Blender.</li> <li>Run the scripts inside to install the addon.</li> <li>Find the Plugget addon by going to <code>Edit &gt; Preferences &gt; Add-ons</code>.</li> <li>Type bqt into the search box and click search.</li> <li>Click install. This installs the bqt addon and all its dependencies. </li> </ol>"},{"location":"install-bqt-addon/#manual-add-on-install","title":"manual add-on install","text":"<p>TODO \ud83d\udc77add step by step images</p> <ol> <li>Download the latest release. You can download the zip from the repo.</li> <li>Extract the zip and copy the <code>bqt</code> folder to your blender addons folder.</li> <li>(ADVANCED) Ensure the dependencies are installed from <code>requirements.txt</code> </li> </ol> <p>Use the Blender python interpreter instead of <code>python</code> <pre><code>cd \"your/bqt/folder/path\"\npython -m pip install -r requirements.txt\n</code></pre></p> <ol> <li>Enable the addon by going to <code>Edit &gt; Preferences &gt; Add-ons</code> and search for <code>qt</code></li> </ol>"},{"location":"keep%20QtWidgets%20in%20foreground/","title":"keep QtWidgets in foreground","text":""},{"location":"keep%20QtWidgets%20in%20foreground/#backlinks","title":"Backlinks","text":"<ul> <li>features<ul> <li>keep QtWidgets in foreground TODO \ud83d\udc77</li> </ul> </li> </ul>"},{"location":"operator%20issues/","title":"Operator issues","text":""},{"location":"operator%20issues/#problem","title":"Problem","text":"<p>The exact same code might behave different when executed from the script editor compared to when executed after pressing a QT button.</p> <p>Blender Operators often fail when run from QT, because they rely on the active window &amp; other context properties. But when running a QT tool, the active window is None, leading to an error.</p> <p>This sample code works in Blender, but won\u2019t work if run from qt. <pre><code>import bpy\nbpy.ops.mesh.primitive_cube_add(location=(0.0, 0.0, 0.0))  # this works\nbpy.ops.object.modifier_add(type='SOLIDIFY')  # missing active object in context error\n</code></pre></p>"},{"location":"operator%20issues/#fix","title":"Fix","text":""},{"location":"operator%20issues/#context-override","title":"context override","text":""},{"location":"operator%20issues/#bqt-utils","title":"bqt utils","text":"<p>bqt ships with a decorator you can add to your functions, like this: <pre><code>import bqt.utils\n@bqt.utils.context_window\ndef my_method():\ndo operator magic\n</code></pre> This will fix the majority of issues, but not all of them. You can also do the exact same manually, with a context override.</p>"},{"location":"operator%20issues/#manual-context-override","title":"manual context override","text":"<p>To work around this, you can override the context. </p> <p>e.g. this is what happens under the hood of the above decorator <pre><code>window = bpy.context.window_manager.windows[0]\nwith bpy.context.temp_override(window=window):\noriginal_code ...\n</code></pre></p> <p>to override additional context properties, just add them to the temp_override:</p> <pre><code>with bpy.context.temp_override(window=window, object=obj, active_object=obj):\n</code></pre>"},{"location":"plugin/","title":"Plugin","text":"<p>this is related https://github.com/swar8080/obsidian-plugin-update-tracker</p> <p>obsidian plugin</p>"},{"location":"prevent%20open%20same%20widget%20twice/","title":"Prevent open same widget twice","text":""},{"location":"prevent%20open%20same%20widget%20twice/#backlinks","title":"Backlinks","text":"<ul> <li>features<ul> <li>prevent open same widget twice TODO \ud83d\udc77</li> </ul> </li> </ul>"},{"location":"quick%20start%20guide/","title":"Quick start guide","text":"<p>Run this code in Blender for a quick demo.  (Assumes you have bqt &amp; PySide2 installed, see install bqt module )</p> <pre><code># install bqt and dependencies\n# TODO\n# run once on startup to setup bqt, not needed if using bqt addon\nimport bqt\nbqt._create_global_app()\n# create widget and show it\nfrom PySide2.QtWidgets import QWidget\nwidget = QWidget()\n# bqt.add(widget)  # optional, bqt-autodetect will add the widget automatically\nwidget.show()\n</code></pre>"},{"location":"setup%20bqt%20develop%20environment/","title":"Setup bqt develop environment","text":"<p>When you clone your repo, bqt won\u2019t show up in Blender. To do so, you can either manually copy your modules to Blender\u2019s modules path, or copy the add-on code to Blender\u2019s addons path.</p> <p>But to do so every time you make an update is a waste of your time. A better workflow is to either:</p> <ul> <li>symlink</li> <li>editable package install</li> <li>VS-Code Blender extension</li> </ul>"},{"location":"setup%20bqt%20develop%20environment/#sym-link","title":"Sym link","text":"<ul> <li>You can create a symlink from your repo to blender\u2019s add-on or modules path. Then any update in the repo auto reflect in Blender on restart of Blender.</li> </ul> <p><pre><code>mklink /J \"C:\\Users\\USERNAME\\AppData\\Roaming\\Blender Foundation\\Blender\\2.93\\scripts\\addons\\bqt\" \"C:\\Users\\hanne\\OneDrive\\Documents\\repos\\_Blender\\bqt\\bqt\"\n</code></pre> Pros</p> <ul> <li>can be used to install bqt as an addon or a module</li> <li>saves time copy pasting folders over every time you want to test a change</li> </ul> <p>Cons</p> <ul> <li>If you symlink the addon and uninstall the addon in Blender, your repo folder might be deleted resulting in loss of uncommitted work.</li> <li>Symlink is hard to keep track of when starting to use it in multiple places. I accidentally deleted some work a few times even though \u201cI know what I\u2019m doing\u201d</li> </ul>"},{"location":"setup%20bqt%20develop%20environment/#editable-package-install","title":"Editable package install","text":"<p>Pros</p> <ul> <li>saves time copy pasting folders over every time you want to test a change</li> <li>Cleaner than symlink, doesn\u2019t accidentally deletes your work.</li> <li>Only works for Python packages. So you can only install bqt as a module, not an add-on. Bqt comes pre-packaged already, with it\u2019s <code>setup.py</code> file.</li> </ul> <p>Cons</p> <ul> <li>this only works for packages python modules</li> <li>Blender doesn\u2019t like editable installs by default, you need to append <code>sitedir</code> to the <code>sys.path</code> on startup. This can be done automatically on startup with a script in blender\u2019s startup path <code>./scripts/startup/*.py</code></li> </ul>"},{"location":"setup%20bqt%20develop%20environment/#vs-code-blender-extension","title":"VS-Code Blender extension","text":"<p>TODO \ud83d\udc77 investigate, might be able to cleanly install bqt as addon, and trigger real time refresh of script code in Blender. But you have to start Blender through VS code</p>"},{"location":"setup%20bqt%20develop%20environment/#backlinks","title":"Backlinks","text":"<ul> <li>install bqt module<ul> <li>Instead of install from source, you might want to setup bqt develop environment.</li> </ul> </li> <li>Installation<ul> <li>(advanced) bqt contributors might want to install with setup bqt develop environment.</li> </ul> </li> <li>contribute guidelines<ul> <li>checkout setup bqt develop environment</li> </ul> </li> </ul>"},{"location":"show%20QWidgets%20without%20freezing%20Blender/","title":"show QWidgets without freezing Blender","text":""},{"location":"show%20QWidgets%20without%20freezing%20Blender/#backlinks","title":"Backlinks","text":"<ul> <li>features<ul> <li>show QWidgets without freezing Blender TODO \ud83d\udc77</li> </ul> </li> </ul>"},{"location":"style%20QWidgets%20with%20Blender%20stylesheet/","title":"style QWidgets with Blender stylesheet","text":""},{"location":"style%20QWidgets%20with%20Blender%20stylesheet/#backlinks","title":"Backlinks","text":"<ul> <li>features<ul> <li>style QWidgets with Blender stylesheet TODO \ud83d\udc77</li> </ul> </li> </ul>"},{"location":"tips%20for%20bqt%20doc%20writers/","title":"Tips for bqt doc writers","text":""},{"location":"tips%20for%20bqt%20doc%20writers/#starter-tips-for-doc-writers","title":"starter tips for doc writers","text":"<p>These docs are edited with Obsidian:</p> <ul> <li>use <code>[[title of note]]</code> to link to a page (this is called wikilink)</li> <li>select text, and paste a URL on it to link to other sites.</li> <li>use <code>#</code>, <code>##</code>or <code>###</code> in front of a sentence to create a header.</li> <li>GitHub wiki is less advanced than Obsidian, avoid fancy features that only work in Obsidian. </li> <li>A new line in GitHub requires the previous line to end in 2 spaces. This wont show in Obsidian.</li> <li>chapters that need more work are flagged with the todo \ud83d\udc77 hashtag. Search for it in Obsidian by clicking the tag.</li> </ul>"},{"location":"why%20bqt/","title":"Why bqt","text":"<p>Custom UI for Python tools in games &amp; VFX often use QT. Maya, Max &amp; Substance support Qt natively, but Blender doesn\u2019t. This is where BQT can help.</p> <p>Bqt takes care of the heavy lifting, so you can focus on your qt tools.</p> <ul> <li>manage focus of widgets, letting you parent widgets to blender</li> <li>manage QApplication setup for you (the qt eventloop)</li> <li>prevent widgets from being garbage collected</li> <li>auto style your widgets to match Blender\u2019s UI</li> </ul>"},{"location":"why%20bqt/#more-info","title":"More info","text":"<pre><code>from PySide2.QtWidgets import QWidget\nQWidget().show()\n</code></pre> <p>When attempting to run a simple widget, it will crash because we don\u2019t have a <code>QApplication</code>. Manually <code>_exec</code> a new <code>QApplication</code> freezes Blender untill you close your custom window. (first time only)</p> <ul> <li>bqt manages the <code>QApplication</code> for you, use <code>QApplication.instance()</code> to access it if needed.</li> </ul> <ul> <li>The widget briefly shows &amp; dissapears because it\u2019s garbage collected.</li> <li>The widget dissapears behind Blender when you click on Blender</li> </ul> <p>To prevent these issues, parent the widget to ]<code>QAppliciation.instance().blender_widget</code> (blender_widget is created by bqt on startup).</p>"},{"location":"widget%20disappears/","title":"Widget disappears","text":"<p>TODO \ud83d\udc77</p> <p>garbage collection isntructions or tips to avoid</p> <p>global widget parent widget to bqt with add_widget method, or legacy parent to belnder_widget directly</p> <p>TODO \ud83d\udc77  link to method</p>"},{"location":"folder1/MultiMarkdown/","title":"MultiMarkdown","text":"<p>In order to create valid HTML, you need properly coded syntax that can be cumbersome for  \u201cnon-programmers\u201d to write. Sometimes, you just want to easily make certain words bold, and certain  words italicized without having to remember the  syntax. Additionally, for example, creating lists:</p> <ul> <li>should be easy</li> <li>should not involve programming</li> </ul> <p>MultiMarkdown</p>"},{"location":"folder1/tags/","title":"Tags","text":"<p>above is mkdoc tags <pre><code>---\ntags:\n\n  - hashtag1\n  - hashtag2\n---\n</code></pre></p> <p>here is a obsidian tag</p> <p>hashtag1</p> <p><code>#hashtag1</code></p> <p>Following is a list of relevant tags: based on mkdoc tags tags.md (this page) is excluded from this list</p> <p>[TAGS]</p>","tags":["hashtag1","hashtag2"]},{"location":"folder1/test1/","title":"Test1","text":"<p>test1b <code>[[test1b]]</code></p> <p>test1b <code>[test1b](test1b)</code></p> <p>test1c <code>[[test1c]]</code> broken link</p> <p>test2 <code>[[test2]]</code></p> <p>hashtag1</p> <p>wiki</p>"},{"location":"folder1/test1b/","title":"Test1b","text":"<p>test content 1 test content 1 test content 1 test content 1 test content 1 test content 1 test content 1 test content 1 test content 1 test content 1 test content 1 </p> <p>test content 1 test content 1 </p> <p>test content 1 sdfvsd</p> <p>test content 1 </p> <p>hashtag</p>"},{"location":"folder1/test_tag/","title":"Test tag","text":"<p>test</p>","tags":["hashtag1","hashtag2"]},{"location":"folder1/%F0%9F%94%90lock/","title":"\ud83d\udd10lock","text":""},{"location":"folder1/%F0%9F%94%90lock/#test","title":"test","text":""},{"location":"folder1/%F0%9F%94%90lock/#password-secret","title":"password: secret","text":""},{"location":"folder22/test2/","title":"Test2","text":"<p>test1</p> <p>wiki</p> test collapse"}]}